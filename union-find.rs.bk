struct Unionfind {
    parent: Vec<i64>
}
impl Unionfind {
    fn root(&mut self, x: usize) -> i64 {
        if self.parent[x] as usize == x {
            return self.parent[x]
        } else {
            return self.root(self.parent[x] as usize)
        }
    }
    fn unite(&mut self, x: usize, y: usize) {
        let rx = self.root(x);
        let ry = self.root(y);
        if rx ==ry {return}
        self.parent[rx] = ry;
    }
}

fn main() {
    let n = 10;
    let mut unionfind = Unionfind {
        parent:  (0..n).collect()
    };
    unionfind.unite(0, 1);
    println!("{:?}", unionfind.root(1));
}
